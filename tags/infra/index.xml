<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>infra on sango.h</title>
    <link>https://yeh35.github.io/blog.github.io/tags/infra/</link>
    <description>Recent content in infra on sango.h</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 31 May 2020 01:59:00 +0900</lastBuildDate>
    
	<atom:link href="https://yeh35.github.io/blog.github.io/tags/infra/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker Hub</title>
      <link>https://yeh35.github.io/blog.github.io/documents/infra/docker/docker-hub/</link>
      <pubDate>Sun, 31 May 2020 01:59:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/infra/docker/docker-hub/</guid>
      <description>들어가기 이번에는 Docker Hub에 대해서 알아볼 것이다. Docker Image를 만들었다면 이 이미지를 배포 혹은 공유할 수 있는 방법이다.
Docker Hub Github와 같은 Docker Hub라는 사이트가 있다. Github와 다른 것은 Private Repository를 하나밖에 못사용 한다는 것?
(불만이 있다면 Registry Server를 직접 구축해도 된다)
사이트에서 회원가입을 하고 Console에서 docker login이라고 입력하면 Docker Hub에 로그인 할 수 있다.
Image Tag 구성 도커 이미지 이름은 다음과 같은 형태로 구성된다. [Registry URL]/[사용자 ID]/[이미지명]:[tag]
 Registry URL 기본 URL은 docker.</description>
    </item>
    
    <item>
      <title>Docker 컨테이너, Image, Dockerfile</title>
      <link>https://yeh35.github.io/blog.github.io/documents/infra/docker/docker-container-image-dockerfile/</link>
      <pubDate>Thu, 28 May 2020 23:00:46 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/infra/docker/docker-container-image-dockerfile/</guid>
      <description>들어가기 Docker 컨테이너 뭐고 Docker Image의 생성 Dockerfile은 어떻게 실행되는지 정리하려고 한다.
Application 환경세팅 문제 우리가 만드는 Application은 실행되는 환경에 따라 OS와 동적 Library에 의존성을 가진다.
즉, Application이 실행되기 위해서는 OS, 동적 Library라는 실행환경이 필요하다.
여기서 문제는 하나의 시스템위에 여러개의 Application을 실행하려고 할때이다.
각 Application이 동일한 라이브러리 버전과 동일한 OS가 필요하다면 상관이 없겠지만
그렇지 않는다고 하면 세팅 지옥의 문이 열린다. (혹시 하나의 Application만 실행하면 되지 라고 생각했다면 간단한 블로그를 띄우려고 해도 WebServer, DB, WebApplication이라는 3개나 필요하다)</description>
    </item>
    
    <item>
      <title>Docker 기본 명령어 정리</title>
      <link>https://yeh35.github.io/blog.github.io/documents/infra/docker/docker-command/</link>
      <pubDate>Sun, 24 May 2020 11:52:46 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/infra/docker/docker-command/</guid>
      <description>들어가기 Docker 명령어를 자꾸 까먹어서 정리하는 차원에 글을 작성한다.
Dokcer가 처음이신 분들은 subicura님의 도커 안내서 를 추천드리고 싶다. (사실 이 글도 subicura님의 도커 안내서를 요약한 것일 뿐이다.)
도커 버전확인 docker version명령어를 입력하면 Client와 Server 정보 두개가 보인다.
Docker는 하나의 실행 파일이지만 Client와 Server 역할을 각각 할 수 있다
커맨드를 입력하면 Client가 Server로 전송하고 결과를 받아 출력해준다.
도커의 실행 docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]옵션[OPTIONS]  -d : detached mode 흔히 말하는 백그라운드 모드 -p : 호스트와 컨테이너의 포트를 연결 (포워딩) -v : 호스트와 컨테이너의 디렉토리를 연결 (마운트) -e : 컨테이너 내에서 사용할 환경변수 설정 –name : 컨테이너 이름 설정 –rm : 프로세스 종료시 컨테이너 자동 제거 -it : -i와 -t를 동시에 사용한 것으로 터미널 입력을 위한 옵션 –link : 컨테이너 연결 [컨테이너명:별칭]  컨테이너 목록 확인 docker ps [OPTIONS]기본은 실행중인 컨테이너 목록만 보여줌</description>
    </item>
    
    <item>
      <title>초보자를 위한 Gradle 안내서 4편: 각자의 프로젝트로</title>
      <link>https://yeh35.github.io/blog.github.io/documents/infra/gradle/gradle-start4/</link>
      <pubDate>Sat, 23 May 2020 22:40:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/infra/gradle/gradle-start4/</guid>
      <description>커리큘럼  Build툴?, Gradle은 무엇인가? Gradle 아키텍쳐 Task 각자의 프로젝트로  이어서.. 여기까지 읽으셨다면 정말 고생하셨습니다.
이제 거의 마지막을 달리고 있습니다.
Gradle의 철학 과 Task의 작동방식 을 설명하였다.
물론 아직 Gradle을 완벽하게 다루기에는 제 설명이 분명 부족한 내용들이 존재한다. 하지만 제 판단에는 앞의 내용을들 완전히 숙지하셨다면 각 Plugin 혹은 Gradle이 출력해주는 로그가 어떤 의미인지 찾아볼 능력 이 생겼을 것이라고 생각한다
이제 각자의 프로젝트에 가서 사용하는 Plugin이 어떻게 작동 하는지
build.gradle의 내용을 보며 공부하시면 된다.</description>
    </item>
    
    <item>
      <title>초보자를 위한 Gradle 안내서 3편: Task</title>
      <link>https://yeh35.github.io/blog.github.io/documents/infra/gradle/gradle-start3/</link>
      <pubDate>Sat, 23 May 2020 12:40:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/infra/gradle/gradle-start3/</guid>
      <description>커리큘럼  Build툴?, Gradle은 무엇인가? Gradle 아키텍쳐 Task 각자의 프로젝트로  이어서.. 전편에서 gradle의 아키텍쳐와 철학 그리고 Lifecycle(생명주기) 에 대해서 다뤘다.
이번 편에서는 Task에 대해서 자세하게 다뤄보려고 한다.
Task? 앞에서 task는 Gradle의 실행단위라고 하였는데 실행단위를 어떤 작업을 하는 약속된 하나의 객체라고 생각하면 된다.
Gradle의 초기화 &amp;gt; 구성 &amp;gt; 실행 3단계에서 실행 단계에서 실질적으로 우리가 원하는 기능을 하는 것은 task다. (사실 모든건 task를 실행하기 위한 준비일 뿐이였다..)
처음에 Console에서 gradle init 명령을 통해 프로젝트를 생성 했었을 것이다.</description>
    </item>
    
    <item>
      <title>초보자를 위한 Gradle 안내서 2편: Gradle 아키텍쳐</title>
      <link>https://yeh35.github.io/blog.github.io/documents/infra/gradle/gradle-start2/</link>
      <pubDate>Fri, 22 May 2020 12:40:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/infra/gradle/gradle-start2/</guid>
      <description>커리큘럼  Build툴?, Gradle은 무엇인가? Gradle 아키텍쳐 Task 각자의 프로젝트로  이어서.. 전편에서는 Build라는게 무엇을 뜻하고 Gradle 설치랑 Gradle wrapper, Gradle의 파일들의 의미에 대해서 봤었다.
(까먹었다면 돌아가세욧!)
이번에는 Gradle의 철학과 아키텍쳐에 대한 내용이다. 겁먹지마요 어렵지 않아요&amp;hellip;
Groovy.. 앞으로 내용 중간중간에 스크립트가 나올 것인데 Groovy 문법에 모르신다면 여기를 눌러서 문법을 한번 읽어보시는 것을 추천드리고 싶다.
Gradle 아키텍쳐 구조 Gradle은 core(본체)와 Plugin으로 나눠져 있다. 갑자기 Plugin? 이라고 생각이 들 수 있지만 사실 Gradle은 빌드툴임에도 빌드 기능은 Core가 아닌 Plugin으로 구현되어 있다</description>
    </item>
    
    <item>
      <title>초보자를 위한 Gradle 안내서 1편: Build툴?, Gradle은 무엇인가?</title>
      <link>https://yeh35.github.io/blog.github.io/documents/infra/gradle/gradle-start1/</link>
      <pubDate>Thu, 21 May 2020 20:40:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/infra/gradle/gradle-start1/</guid>
      <description>들어가면서 이 글은 그레이들을 처음 접하는 사람보다 Android studio 혹은 그외에서 사용은 하는데 뭐지 알아서 되네 정도로 쓰시는 분들을 타겟으로 작성하였다. (제가 그랬거든요 ㅎㅎ)
gradle의 마법같은 작동을 공식문서와 gradle의 파일들을 열어보면서 해체 할 것이다.
커리큘럼  Build툴?, Gradle은 무엇인가? Gradle 아키텍쳐 Task 각자의 프로젝트로  빌드툴이란 위키에서는 빌드를 다음과 같이 정의하고 있다. 소프트웨어 빌드는 소스 코드 파일을 컴퓨터나 휴대폰에서 실행할 수 있는 독립(standalone) 소프트웨어 가공물로 변환하는 과정을 말하거나 그에 대한 결과물을 일컫는다.</description>
    </item>
    
  </channel>
</rss>