<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on sango.h</title>
    <link>https://yeh35.github.io/blog.github.io/tags/java/</link>
    <description>Recent content in java on sango.h</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 03 Jun 2020 20:15:00 +0900</lastBuildDate>
    
	<atom:link href="https://yeh35.github.io/blog.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>람다식</title>
      <link>https://yeh35.github.io/blog.github.io/documents/java/lamdba-java/</link>
      <pubDate>Wed, 03 Jun 2020 20:15:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/java/lamdba-java/</guid>
      <description>들어가기전 IDE에서 추천해주니 의심하지 않고 사용을 하였지만 어떤식으로 작동하는 것인지
알아보면서 정리한 내용이다.
람다식(Lamdaba Expressions)? 처음 람다라는 이야기를 들었을 떄 &amp;lsquo;람보&#39;가 생각나는&amp;hellip;. 나만 그런건가?&amp;hellip;
람다식은 Java8부터 도입되었다.
람다식은 익명함수(anonymous function)을 생성하기 위한 식으로 함수 지향 프로그래밍에 사실 더 가깝다.
매개변수를 가진 코드블록에 불가하지만, 런티임 시 익명 구현 객체를 생성한다.
람다식를 사용하기 위해서는 규칙이 있다.
람다식이 구현할 인터페이스에 추상메소드가 한개만 존재햐아한다.
Java8이전에 코드에 익숙하다면 간결해 보이지만 조금 낫선감은 없지 않다.
정리하면 람다식은 로컬 익명 구현객체를 생성을 하며 주로 Interface의 메소드를 간편하게 구현하는 목적으로 사용한다</description>
    </item>
    
    <item>
      <title>Junit5 한번에 끝내기</title>
      <link>https://yeh35.github.io/blog.github.io/documents/java/junit5/</link>
      <pubDate>Tue, 02 Jun 2020 21:24:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/java/junit5/</guid>
      <description>소개 junit은 단위 테스트를 작성하는 자바 개발자 93%가 사용하는 테스팅 프레임워크 이다. 테스트 코드를 작성해야하는
구성  JUnit Platform : 테스트를 실행시켜주는 런처를 제공, TestEngine API가 제공된다. Jupiter: JUnit 5를 지원하는 TestEngine API의 구연체 Vintage: JUnit 4, 3를 지원하는 TestEngine API의 구연체  의존성 추가  2.2+ 버전의 스프링 부트 프로젝트라면 spring-boot-starter-test에 기본으로 탑제가 되어있다. 아니라면&amp;hellip; &amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;junit-jupiter-engine&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;5.5.2&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;  기본 에노테이션은  @Test @BeforeAll / @AfterAll : 전체 @Test 메소드 전후 @BeforeEach / @AfterEach : 각 @Test 메소드 전후 @Disabled : @Test 메소드 실행 안하기  예제 import org.</description>
    </item>
    
  </channel>
</rss>