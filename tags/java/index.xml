<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on sango.h</title>
    <link>https://yeh35.github.io/blog.github.io/tags/java/</link>
    <description>Recent content in java on sango.h</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 09 Jun 2020 00:27:00 +0900</lastBuildDate>
    
	<atom:link href="https://yeh35.github.io/blog.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring JPA 2편: Setting!!</title>
      <link>https://yeh35.github.io/blog.github.io/documents/spring/spring-jpa2-setting/</link>
      <pubDate>Tue, 09 Jun 2020 00:27:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/spring/spring-jpa2-setting/</guid>
      <description>사실 세팅은 누가 해놓은 걸 보는게 가장 빠르다.. 제가 해놓은 것이 있는데 참조하며 다음 사항들을 살며보면 될거 같다.
gradle.build  Spring Boot Verion 2.* (아니면 Spring framework Version 5.*) Spring Boot JPA 의존성 확인 compile(&amp;#39;org.springframework.boot:spring-boot-starter-data-jpa&amp;#39;)  Application.yml h2 DB로 되어 있는데 각 JDBC를 안다면 각 DB에 맞게 세팅할 수 있을 것이다.
  JDBC 설정 확인
datasource:url:jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSEusername:rootpassword:driver-class-name:org.h2.Driver  개발시 쿼리 보려면
spring:jpa:database:h2properties.hibernate.dialect:org.hibernate.dialect.H2Dialecthibernate:ddl-auto:createshow-sql:trueproperties:hibernate:format_sql:trueuse_sql_comments:true  </description>
    </item>
    
    <item>
      <title>Spring JPA 1편: Build UP!!</title>
      <link>https://yeh35.github.io/blog.github.io/documents/spring/spring-jpa1-buildup/</link>
      <pubDate>Mon, 08 Jun 2020 22:00:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/spring/spring-jpa1-buildup/</guid>
      <description>참고 본 시리즈는 백기선님의 스프링 데이터 JPA를 학습 후 정리한 내용입니다.
관계형 DB 와 Java 관계형 DB 와 Java를 연결하는 기본은 JDBC이다. JDBC를 기반으로 여러 방식들이 제시되었다.
JDBC JDBC는 Java Data Base Connectivity으로 JDK 1.1을 기준으로 Java의 표준(java.sql.*)이 되었다.
Java 표준으로 정해졌기 떄문에 사용하려는 DBMS 진영에서 JDBC 드라이버(API를 구현한 라이브러리)를 제공하면 어떤 DBMS든 쉽게 사용할 수 있을 줄 알았다. 하지만 DBMS와 연결하는 API만 표준으로 제공할뿐 실질적은 Query는 직접 작성해야겠다.
 예제  Mybatis: SQL Mapping JDBC를 그냥 사용하니 코드와 SQL이 같이 있어서 불편해.</description>
    </item>
    
    <item>
      <title>Java에서 Assert 제대로 쓰기</title>
      <link>https://yeh35.github.io/blog.github.io/documents/java/java-assert/</link>
      <pubDate>Sun, 07 Jun 2020 21:24:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/java/java-assert/</guid>
      <description>Assert Assert는 개발/테스트 단계에서 파라미터가 제대로 넘어왔는지 계산이 제대로 됬는지 혹은 특정 메소드가 작동하는 한계상황(Null이 들어오면 작동안함)을 정하는 용도로 사용한다.
Java에서 Assert Java에서는 JDK 1.4부터 assert라는 예약어 를 지원했다.
assert [Boolean] // 참이면 Pass, 거짓이면 AssertionError실행옵션 세팅 java default 실행에서는 assert가 모두 제외된다. 실행시 -ea 옵션을 줘야지만 작동하니 개발/테스트 일때는 설정해놓기
java -eaIntellij에서는 기본 JVM 옵션이 -ea이다. (그래도 혹시 모르니 확인하기..) (assert-intllij-setting)[/blog.github.io/img/documents/java/assert-intllij-setting.png]
Assert를 어떻게 써야할까? Assert는 아무데나 덕지덕지 붙여도 상관이 없지만, 꼭 넣으면 좋은 곳들이 있다.</description>
    </item>
    
    <item>
      <title>람다식</title>
      <link>https://yeh35.github.io/blog.github.io/documents/java/lamdba-java/</link>
      <pubDate>Wed, 03 Jun 2020 20:15:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/java/lamdba-java/</guid>
      <description>들어가기전 IDE에서 추천해주니 의심하지 않고 사용을 하였지만 어떤식으로 작동하는 것인지
알아보면서 정리한 내용이다.
람다식(Lamdaba Expressions)? 처음 람다라는 이야기를 들었을 떄 &amp;lsquo;람보&#39;가 생각나는&amp;hellip;. 나만 그런건가?&amp;hellip;
람다식은 Java8부터 도입되었다.
람다식은 익명함수(anonymous function)을 생성하기 위한 식으로 함수 지향 프로그래밍에 사실 더 가깝다.
매개변수를 가진 코드블록에 불가하지만, 런티임 시 익명 구현 객체를 생성한다.
람다식를 사용하기 위해서는 규칙이 있다.
람다식이 구현할 인터페이스에 추상메소드가 한개만 존재햐아한다.
Java8이전에 코드에 익숙하다면 간결해 보이지만 조금 낫선감은 없지 않다.
정리하면 람다식은 로컬 익명 구현객체를 생성을 하며 주로 Interface의 메소드를 간편하게 구현하는 목적으로 사용한다</description>
    </item>
    
    <item>
      <title>Junit5 한번에 끝내기</title>
      <link>https://yeh35.github.io/blog.github.io/documents/java/junit5/</link>
      <pubDate>Tue, 02 Jun 2020 21:24:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/java/junit5/</guid>
      <description>소개 junit은 단위 테스트를 작성하는 자바 개발자 93%가 사용하는 테스팅 프레임워크 이다. 테스트 코드를 작성해야하는
구성  JUnit Platform : 테스트를 실행시켜주는 런처를 제공, TestEngine API가 제공된다. Jupiter: JUnit 5를 지원하는 TestEngine API의 구연체 Vintage: JUnit 4, 3를 지원하는 TestEngine API의 구연체  의존성 추가  2.2+ 버전의 스프링 부트 프로젝트라면 spring-boot-starter-test에 기본으로 탑제가 되어있다. 아니라면&amp;hellip; &amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;junit-jupiter-engine&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;5.5.2&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;  기본 에노테이션은  @Test @BeforeAll / @AfterAll : 전체 @Test 메소드 전후 @BeforeEach / @AfterEach : 각 @Test 메소드 전후 @Disabled : @Test 메소드 실행 안하기  예제 import org.</description>
    </item>
    
  </channel>
</rss>