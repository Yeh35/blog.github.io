<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JPA on sango.h</title>
    <link>https://yeh35.github.io/blog.github.io/tags/jpa/</link>
    <description>Recent content in JPA on sango.h</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 09 Jun 2020 00:27:00 +0900</lastBuildDate>
    
	<atom:link href="https://yeh35.github.io/blog.github.io/tags/jpa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring JPA 2편: Setting!!</title>
      <link>https://yeh35.github.io/blog.github.io/documents/spring/spring-jpa2-setting/</link>
      <pubDate>Tue, 09 Jun 2020 00:27:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/spring/spring-jpa2-setting/</guid>
      <description>사실 세팅은 누가 해놓은 걸 보는게 가장 빠르다.. 제가 해놓은 것이 있는데 참조하며 다음 사항들을 살며보면 될거 같다.
gradle.build  Spring Boot Verion 2.* (아니면 Spring framework Version 5.*) Spring Boot JPA 의존성 확인 compile(&amp;#39;org.springframework.boot:spring-boot-starter-data-jpa&amp;#39;)  Application.yml h2 DB로 되어 있는데 각 JDBC를 안다면 각 DB에 맞게 세팅할 수 있을 것이다.
  JDBC 설정 확인
datasource:url:jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSEusername:rootpassword:driver-class-name:org.h2.Driver  개발시 쿼리 보려면
spring:jpa:database:h2properties.hibernate.dialect:org.hibernate.dialect.H2Dialecthibernate:ddl-auto:createshow-sql:trueproperties:hibernate:format_sql:trueuse_sql_comments:true  </description>
    </item>
    
    <item>
      <title>Spring JPA 1편: Build UP!!</title>
      <link>https://yeh35.github.io/blog.github.io/documents/spring/spring-jpa1-buildup/</link>
      <pubDate>Mon, 08 Jun 2020 22:00:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/documents/spring/spring-jpa1-buildup/</guid>
      <description>참고 본 시리즈는 백기선님의 스프링 데이터 JPA를 학습 후 정리한 내용입니다.
관계형 DB 와 Java 관계형 DB 와 Java를 연결하는 기본은 JDBC이다. JDBC를 기반으로 여러 방식들이 제시되었다.
JDBC JDBC는 Java Data Base Connectivity으로 JDK 1.1을 기준으로 Java의 표준(java.sql.*)이 되었다.
Java 표준으로 정해졌기 떄문에 사용하려는 DBMS 진영에서 JDBC 드라이버(API를 구현한 라이브러리)를 제공하면 어떤 DBMS든 쉽게 사용할 수 있을 줄 알았다. 하지만 DBMS와 연결하는 API만 표준으로 제공할뿐 실질적은 Query는 직접 작성해야겠다.
 예제  Mybatis: SQL Mapping JDBC를 그냥 사용하니 코드와 SQL이 같이 있어서 불편해.</description>
    </item>
    
  </channel>
</rss>