<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on sango.h</title>
    <link>https://yeh35.github.io/blog.github.io/posts/</link>
    <description>Recent content in Posts on sango.h</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr</language>
    <lastBuildDate>Sun, 10 May 2020 15:45:22 +0900</lastBuildDate>
    
	<atom:link href="https://yeh35.github.io/blog.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is REST API(그런 REST API로 괜찮은가)</title>
      <link>https://yeh35.github.io/blog.github.io/posts/documents/web/what_is_rest_api/</link>
      <pubDate>Sun, 10 May 2020 15:45:22 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/posts/documents/web/what_is_rest_api/</guid>
      <description>이응준님의 &amp;ldquo;그런 REST API로 괜찮은가&amp;rdquo; 발표를 보고 정리한 내용이다.
REST API란?  REpresentational State Transfer REST 아키텍처를 따르는 API 인터넷 상의 시스템 간의 상호 운용성(interoperabiliy)을 제공하는 방법중 하나 시스템 제각각의 독립적인 진화를 보장하기 위한 방법  REST 아키택처 스타일란?  client-server stateless cache uniform interface layered system code-on-demand (optional)  (아키택처 스타일이란 제약조건의 집합) 나머지는 잘 지켜지지만 uniform interface는 쉽게 지켜지지 않는다..
Uniform Interface의 제약 조건  Identification or resource : 리소스가 URL로 식별되면 된다.</description>
    </item>
    
    <item>
      <title>다이나믹 프록시</title>
      <link>https://yeh35.github.io/blog.github.io/posts/documents/java/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9_%ED%94%84%EB%A1%9D%EC%8B%9C/</link>
      <pubDate>Sun, 10 May 2020 12:40:07 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/posts/documents/java/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9_%ED%94%84%EB%A1%9D%EC%8B%9C/</guid>
      <description>사전 지식  java Class loading (실행과정) java 리플렉션  프록시 패턴  프록시와 리얼 서브젝트가 같은 인터페이스를 상속받고 클라이언트는 인터페이스를 프록시 타입으로 선언해서 사용한다. 프록시에서는 앞뒤로 부가 가능을 추가하고 리얼 서브젝트를 호출 한다.   결과적으로 리얼 서브젝트는 제공하는 핵심기능을 유지하며 코드 변경 없이 부가적인 기능(트렌젝션, 접근 제어, 로깅)을 제공할 수 있다.  다이나믹 프록시  테스트 코드 실행을 위해서 junit4를 사용할 것이다.    프록시 패턴 인터페이스가 필요하듯 인터페이스를 추가한다</description>
    </item>
    
    <item>
      <title>문장 성분과 문장 형식</title>
      <link>https://yeh35.github.io/blog.github.io/posts/documents/english/%EB%AC%B8%EC%9E%A5-%EC%84%B1%EB%B6%84%EA%B3%BC-%EB%AC%B8%EC%9E%A5-%ED%98%95%EC%8B%9D/</link>
      <pubDate>Sun, 10 May 2020 12:19:01 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/posts/documents/english/%EB%AC%B8%EC%9E%A5-%EC%84%B1%EB%B6%84%EA%B3%BC-%EB%AC%B8%EC%9E%A5-%ED%98%95%EC%8B%9D/</guid>
      <description>문장성분 주어(S) (~은, 는, 이, 가) 동사(V) 목적어(O) (~을[를], 에게) 보어(C)  주어의 의미나 상태를 보충 설명, 두개로 나뉜다. 주격 보어 (주격을 수식) 목적격 보어 (목적어를 수식)  수식어(M)  부사, 전명구는 무줘건 수식어!!
물론 형용사도 수식어가 될 수 있다.  보어(C),수석어(M)을 구분  수식어와 주격보어의 구별: 주어와의 관련성  He remained here all night: &amp;lsquo;here&#39;은 부사고 부사는 무줘건 수식어 He remained poor all his life: &amp;lsquo;poor&#39;은 주어의 상태를 나타내는 주격 보어   수식어와 목적격보어의 구별: 목적어와의 관련성  I found the thick book easily : &amp;lsquo;easily&#39;는 목적어가 아닌 동사를 꾸며줌으로 수식어 I found the thick book easy to read : &amp;lsquo;easy to reads&#39;는 목적어를 꾸며줌으로 목적격보어    구와 절  구: 두 개 이상의 단어가 모여서 하나의 품사(하나의 뜻이 되는) 역할을 하는 것  의문사 + to부정사구는 &amp;ldquo;~해야할지&amp;rdquo;, &amp;ldquo;~할지&amp;quot;로 해석된다.</description>
    </item>
    
    <item>
      <title>TIL 2020 05 10 (일)</title>
      <link>https://yeh35.github.io/blog.github.io/posts/tir/tir-2020-05-10/</link>
      <pubDate>Sun, 10 May 2020 12:12:09 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/posts/tir/tir-2020-05-10/</guid>
      <description>오늘 한 일 더 자바, 코드를 조작하는 다양한 방법 (인프런-백기선강사님)  다아나믹 프록시 강의 듣기 블로그글로 추가 정리 영단어 17개 암기 (대중교통)  REST API 그런 REST API로 괜찮은가
 https://www.youtube.com/watch?v=RP_f5dMoHFc 발표 내용 블로그에 정리 현제로써는 REST를 API에서 따르는 것이 어렵게 느껴지기 때문에 HTTP API로 할 것 같다. 엄밀하게는 REST API는 아니지만 REST API라고 부를 수 있다.
(마소도 네이버도 카카오도 그러는데 못할게 있나?)  HTTP(!=REST) API Versing problem
 https://www.troyhunt.com/your-api-versioning-is-wrong-which-is/ https://www.</description>
    </item>
    
    <item>
      <title>TIL 2020 05 09 (토)</title>
      <link>https://yeh35.github.io/blog.github.io/posts/tir/tir-2020-05-09/</link>
      <pubDate>Sat, 09 May 2020 23:10:06 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/posts/tir/tir-2020-05-09/</guid>
      <description>오늘 한 일  TIL(Today I learned)에 대한 블로그 글을 작성  https://yeh35.github.io/blog.github.io/img/posts/tir/tir-start/   영어과외 복습 (Grammar Zone)  문장 성분과 문장 형식 &amp;lt;&amp;ndash; document 기록    느낀점  공부를 하는 것이 생각보다 오래걸린다. (11시에 시작했는데 지금 1시다. 2시간&amp;hellip;)  물론 양에 따라 다르겠지만 한번에 정리하려고 하지말고 공부 틈틈히 정리하고 TIL은 마지막에 합치는 작업으로 해야겠다.   영어 공부는 규칙 이해 -&amp;gt; 문장 읽기 -&amp;gt; 단어 암기 -&amp;gt; 문장 읽기 -&amp;gt; 단어 암기&amp;hellip;.</description>
    </item>
    
    <item>
      <title>TIL(Today I Learned) start</title>
      <link>https://yeh35.github.io/blog.github.io/posts/tir/tir-start/</link>
      <pubDate>Sat, 09 May 2020 11:40:55 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/posts/tir/tir-start/</guid>
      <description>매일 노트북을 열지만&amp;hellip; 잘때면 &amp;ldquo;내가 오늘 뭘했지?&amp;rdquo; (디지털 치매인가..)하며 현타가 자주 온다.
내가 지금 제대로 하는 건가? 결과가 필요해!! 그러다가 jojoldu님의 일일 커밋을 보고 나도 저거 해봐야겠다는 마음을 먹었다.
사전조사를 하면서.. Google님께 여줘보니 많은 후기와 조언들이 있었다. 그러던 중 TIL이라는 것을 발견했고 현재 내 상황에는 이것이 더 맞겠다는 생각이 들었다.
후기들을 읽으면서 정리한 내용은 아래에 [일일 커밋(TIR 포함) 후기 요약]으로 추가해 놨다. (일일커밋, TIL이 뭔지는 검색하면 널리고 널렸으니 설명은 생략!)</description>
    </item>
    
    <item>
      <title>꽃미남 교수님께 배우는 C언어(pocu Comp2200) 후기</title>
      <link>https://yeh35.github.io/blog.github.io/posts/pocu/comp2200/</link>
      <pubDate>Thu, 23 Apr 2020 21:22:02 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/posts/pocu/comp2200/</guid>
      <description>comp2200?? 꽃미남(?) 포프님께 C언어를 배우는 과목이다.
과목이라고 표현한 것은 Comp2200을 듣기 위하서는 선수 과목들을 배우고 들어야 하기 때문이다.
(선수과목이 필수는 아니지만 풀코스를 수강한 학생으로써 선수과목은 사실상 필수라고 말하고 싶다.)
 꽃미남 사진의 출처 Pocu Academy COMP2200  C언어의 핵심 핵심은 아래 3가지라고 생각한다.
 포인터 메모리 관리 (할당/해제) 직관성  재직 중인 회사에서 주로 Java를 사용하기에 Java와 C언어를 간단하게 비교하면서 핵심들이 다른 언어에 어떤 식으로 녹아났고 그 가치에 대해서 보려고 한다.</description>
    </item>
    
    <item>
      <title>스프링 부트와 AWS로 혼자 구현하는 웹 서비스</title>
      <link>https://yeh35.github.io/blog.github.io/posts/spring/jojoldu-spring-boot-alone-building-book/</link>
      <pubDate>Tue, 21 Apr 2020 06:00:00 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/posts/spring/jojoldu-spring-boot-alone-building-book/</guid>
      <description>Beginning 회사에서 Spring + Tomcat로 구축된 WAS에 신규 도메인을 추가할 일이 생겼다.
Java를 사용할 줄 알았기에 쉽게 할 줄 알았지만.. 현실은 코드 복붙을 하고 있는 나를 발견했다&amp;hellip; Spring에 대해서 공부를 해야겠다고 검색을 해보니 디자인부터 이쁜(?) 책이 있어서 사게 되었다.
 summary 책 제목처럼 서비스를 구현부터 서비스를 운영하는 과정을 간략하게 체험해 볼 수 있었다.
하지만 Intellij, Spring, Gradle을 잘 모른다면 삽질을 많이 해야한다.
이동욱작가님의 Github를 보고 환경 구축을 철저하게 하자.
 https://github.</description>
    </item>
    
    <item>
      <title>Hugo Blog 구축기</title>
      <link>https://yeh35.github.io/blog.github.io/posts/hugo/hugo-blog-builder/</link>
      <pubDate>Wed, 11 Mar 2020 20:36:25 +0900</pubDate>
      
      <guid>https://yeh35.github.io/blog.github.io/posts/hugo/hugo-blog-builder/</guid>
      <description>기술 블로그를 시작한 이유 멋진 기술 블로그들을 가보면 다들 글을 왜이렇게 잘 쓰는지&amp;hellip;
뭔가 멋있기도 하고 내가 뒤쳐저 있는 것 같기도 하고&amp;hellip;
그냥 그런 블로그를 가지고 싶었고 시작했다.
Hugo를 선택한 이유 처음에는 Tstory에 한 두개 정도 글을 썻다.
매우 편한 환경이였고 글을 맛갈나게 쓰는 것만 신경쓰면 되는 환경이였다.
하지만 한편에 아쉬움이 계속 남았다.
그래도 뭔가 더 이쁜 나만의 블로그를 가지고 싶다는 욕구가 해결되지 않았다.
친구랑 빵맥(빵에 맥주)을 하던 중 &amp;ldquo;깃 블로그 해봐&amp;quot;라는 말에 다음날 부랴부랴 찾게 되었다.</description>
    </item>
    
  </channel>
</rss>